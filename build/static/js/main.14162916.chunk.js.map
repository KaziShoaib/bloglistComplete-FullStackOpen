{"version":3,"sources":["components/Blog.js","services/blogs.js","components/Notification.js","services/login.js","components/LoginForm.js","components/Togglable.js","components/BlogForm.js","App.js","index.js"],"names":["Blog","blog","addLike","deleteBlog","useState","detailflag","setDetailflag","showWhenHidden","display","showWhenDetail","toggleDetailFlag","showDeleteButton","loggedUserDataJSON","window","localStorage","getItem","userData","JSON","parse","user","username","className","style","title","author","onClick","href","url","likes","name","id","confirm","token","getAll","a","axios","get","response","data","setToken","nowToken","create","blogObject","config","headers","Authorization","post","update","newObject","put","delete","Notification","successMessage","errorMessage","login","credential","LoginForm","handleLogin","setUsername","password","setPassword","onSubmit","event","preventDefault","value","type","onChange","target","Togglable","React","forwardRef","props","ref","visible","setVisible","hideWhenVisible","showWhenVisible","toggleVisible","useImperativeHandle","buttonLabel","children","displayName","BlogForm","addBlog","setTitle","setAuthor","setUrl","App","blogs","setBlogs","setSuccessMessage","setErrorMessage","setUser","blogFormRef","useRef","useEffect","blogService","then","userCredentials","loginService","setItem","stringify","setTimeout","current","returnedBlog","modifiedReturnedBlog","toString","concat","error","filter","b","message","increaseLikeOf","find","likeObj","map","removeItem","sortedBlog","sort","bloga","blogb","key","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.14162916.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport '../index.css';\r\n\r\nconst Blog = ({ blog, addLike, deleteBlog }) => {\r\n  const [detailflag, setDetailflag] = useState(false);\r\n\r\n  const showWhenHidden = { display : detailflag ? 'none' : '' };\r\n  const showWhenDetail = { display : detailflag ? '' : 'none' };\r\n\r\n  const toggleDetailFlag = () => setDetailflag(!detailflag);\r\n\r\n  let showDeleteButton = { display : 'none' };\r\n  const loggedUserDataJSON = window.localStorage.getItem('loggedBlogappUser');\r\n  if(loggedUserDataJSON){\r\n    const userData = JSON.parse(loggedUserDataJSON);\r\n    const userIsTheCreator = blog.user.username === userData.username;\r\n    if(userIsTheCreator){\r\n      showDeleteButton = { display : '' };\r\n    }\r\n  }\r\n\r\n  //this function should be async\r\n  //it should await the deleteBlog function\r\n  const handleDelete = (id) => {\r\n    if(window.confirm(`Do you want to delete ${blog.title}?`)){\r\n      deleteBlog(id);\r\n    }\r\n\r\n  };\r\n\r\n  return (\r\n    <div className='blog'>\r\n      {/* the className blogSummary is given for test purpose */}\r\n      <div style={showWhenHidden} className='blogSummary'>\r\n        <p>\r\n          {blog.title} {blog.author} <button onClick={toggleDetailFlag} className='view-button'>view</button>\r\n        </p>\r\n      </div>\r\n      {/* the className blogDetail is given for test purpose */}\r\n      <div style={showWhenDetail} className='blogDetail'>\r\n        <p>\r\n          {blog.title} {blog.author} <button onClick={toggleDetailFlag}>hide</button>\r\n        </p>\r\n        <p>\r\n          <a href={blog.url}>{blog.url}</a>\r\n        </p>\r\n        <p>\r\n          Likes <span className='like-count'>{blog.likes}</span> <button onClick={addLike} className='like-button'>Like</button>\r\n        </p>\r\n        <p>\r\n          {blog.user.name}\r\n        </p>\r\n        <button style={showDeleteButton} className='delete-button' onClick={() => handleDelete(blog.id)}>Delete</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Blog;\r\n","import axios from 'axios';\r\nconst baseUrl = '/api/blogs';\r\n\r\nlet token = null;\r\n\r\n//this function is called from app.js when someone logs in with token returned from backend\r\nconst setToken = nowToken => {\r\n  token = `bearer ${nowToken}`;\r\n};\r\n\r\nconst getAll = async () => {\r\n  const response = await axios.get(baseUrl);\r\n  return response.data;\r\n};\r\n\r\n\r\nconst create = async (blogObject) => {\r\n  const config = {\r\n    headers : { Authorization : token }\r\n  };\r\n  //config parameter will set an Authorization header in the request\r\n  const response = await axios.post(baseUrl, blogObject, config);\r\n  return response.data;\r\n};\r\n\r\n\r\nconst update = async (id, newObject) => {\r\n  let response = await axios.put(`${baseUrl}/${id}`, newObject);\r\n  return response.data;\r\n};\r\n\r\n\r\nconst deleteBlog = async(id) => {\r\n  const config = {\r\n    headers : { Authorization : token }\r\n  };\r\n  //config parameter will set an Authorization header in the request\r\n  const response = await axios.delete(`${baseUrl}/${id}`, config);\r\n  return response.data;\r\n};\r\n\r\nexport default { getAll, setToken, create, update, deleteBlog };","import React from 'react';\r\nimport '../index.css';\r\n\r\nconst Notification = ({ successMessage, errorMessage }) => {\r\n  if(successMessage){\r\n    return (\r\n      <div className='success'>\r\n        {successMessage}\r\n      </div>\r\n    );\r\n  }\r\n  if(errorMessage){\r\n    return (\r\n      <div className='error'>\r\n        {errorMessage}\r\n      </div>\r\n    );\r\n  }\r\n  return null;\r\n};\r\n\r\nexport default Notification;","import axios from 'axios';\r\nconst baseURL = '/api/login';\r\n\r\n\r\nconst login = async (credential) => {\r\n  const response = await axios.post(baseURL, credential);\r\n  return response.data;\r\n};\r\n\r\n\r\nexport default { login };","import React, { useState } from 'react';\r\nimport '../index.css';\r\n\r\n//this component creates it's own states\r\n//it gets one function in props\r\n//once the log in button is pressed the login form submission function\r\n//sends the new user credentials to the props function\r\n\r\nconst LoginForm = ({ handleLogin }) => {\r\n\r\n  const [username, setUsername] = useState('');\r\n  const [password, setPassword] = useState('');\r\n\r\n  //this function should be async and await the handleLogin function\r\n  const sendUserCredentials = (event) => {\r\n    event.preventDefault();\r\n    const userCredentials = { username, password };\r\n    handleLogin(userCredentials);\r\n    setUsername('');\r\n    setPassword('');\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Log in to application</h2>\r\n      <form onSubmit={sendUserCredentials}>\r\n        {/* the ids are given for test purpose */}\r\n        <div>\r\n          Username:\r\n          <input\r\n            name=\"Username\"\r\n            value={username}\r\n            type=\"text\"\r\n            id=\"username\"\r\n            onChange = {event => setUsername(event.target.value)}\r\n          />\r\n        </div>\r\n        <div>\r\n          Password:\r\n          <input\r\n            name=\"Password\"\r\n            value={password}\r\n            type=\"password\"\r\n            id='password'\r\n            onChange = {event => setPassword(event.target.value)}\r\n          />\r\n        </div>\r\n        <button id='login-button' type=\"submit\">Log in</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default LoginForm;","import React, { useState, useImperativeHandle } from 'react';\r\nimport '../index.css';\r\n\r\n//we can use PropTypes to specify that\r\n//the some of the prop elements must be provided from the parent element\r\n//the App component in this case\r\nimport PropTypes from 'prop-types';\r\n\r\n//the whole component is wrapped in a React.forwardRef function call\r\n//because we want to access a function created here from outside\r\n//i.e. from the app component\r\n//the component also gets a ref from the app component\r\nconst Togglable = React.forwardRef((props, ref) => {\r\n  const [visible, setVisible] = useState(false);\r\n\r\n  const hideWhenVisible = { display : visible ? 'none' : '' };\r\n  const showWhenVisible = { display : visible ? '' : 'none' };\r\n\r\n  const toggleVisible = () => {\r\n    setVisible(!visible);\r\n  };\r\n\r\n  //the useImperativeHandle function is making sure that the\r\n  //toggleVisible function can be accessed from an outside component\r\n  //i.e. from the App component\r\n  //It is using the ref sent from the App component\r\n  useImperativeHandle(ref, () => {\r\n    return {\r\n      toggleVisible\r\n    };\r\n  });\r\n\r\n  return (\r\n    //the props.children will render all the conponents inside the opening and\r\n    //closing tag of the Togglable component\r\n    <div>\r\n      <div style={hideWhenVisible}>\r\n        <button onClick={toggleVisible}>{props.buttonLabel}</button>\r\n      </div>\r\n      <div style={showWhenVisible}>\r\n        {props.children}\r\n        <button onClick={toggleVisible}>Cancel</button>\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n\r\n\r\n//we are declaring here that buttonLabel should be provided in the props\r\n//and that it should be a string\r\n//ther will be error in the console\r\n//if buttonLabel is note sent in the props\r\nTogglable.propTypes = {\r\n  buttonLabel : PropTypes.string.isRequired\r\n};\r\n\r\n//this is necessary for eslint\r\n//without this the Togglable component\r\n//will note have any name\r\nTogglable.displayName = 'Togglable';\r\n\r\nexport default Togglable;","import React, { useState } from 'react';\r\nimport '../index.css';\r\n\r\n//this component creates it's own states\r\n//it get one function in props\r\n//once the create button is pressed the login form submission function\r\n//sends the new blogObject to the props function\r\n\r\n\r\nconst BlogForm = ({ addBlog }) => {\r\n\r\n  const [title, setTitle] = useState('');\r\n  const [author, setAuthor] = useState('');\r\n  const [url, setUrl] = useState('');\r\n\r\n  //this function should be async and await the addBlog function\r\n  const sendNewBlog = (event) => {\r\n    event.preventDefault();\r\n    const blogObject = { title, author, url };\r\n    addBlog(blogObject);\r\n    setTitle('');\r\n    setAuthor('');\r\n    setUrl('');\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Add a new blog</h2>\r\n      <form onSubmit={sendNewBlog}>\r\n        {/* the ids are given to input fields for testing purpose */}\r\n        <div>\r\n          Title:\r\n          <input\r\n            name=\"Title\"\r\n            id='title'\r\n            type=\"text\"\r\n            value={title}\r\n            onChange={(event) => setTitle(event.target.value)}\r\n          />\r\n        </div>\r\n        <div>\r\n          Author:\r\n          <input\r\n            name=\"Author\"\r\n            id='author'\r\n            type=\"text\"\r\n            value={author}\r\n            onChange={(event) => setAuthor(event.target.value)}\r\n          />\r\n        </div>\r\n        <div>\r\n          URL:\r\n          <input\r\n            name=\"URL\"\r\n            id='url'\r\n            type=\"text\"\r\n            value={url}\r\n            onChange={(event) => setUrl(event.target.value)}\r\n          />\r\n        </div>\r\n        <button id='submit-blog-button' type=\"submit\">create</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BlogForm;","import React, { useState, useEffect, useRef } from 'react';\r\nimport Blog from './components/Blog';\r\nimport blogService from './services/blogs';\r\nimport Notification from './components/Notification';\r\nimport loginService from './services/login';\r\nimport LoginForm from './components/LoginForm';\r\nimport Togglable from './components/Togglable';\r\nimport BlogForm from './components/BlogForm';\r\n\r\nconst App = () => {\r\n  const [blogs, setBlogs] = useState([]);\r\n  const [successMessage, setSuccessMessage] = useState(null);\r\n  const [errorMessage, setErrorMessage] = useState(null);\r\n  const [user, setUser] = useState(null);\r\n  //we will use this ref to access functions defined in other components\r\n  //i.e. components that are rendered from the App component\r\n  const blogFormRef = useRef();\r\n\r\n  useEffect(() => {\r\n    blogService.getAll().then(blogs =>\r\n      setBlogs( blogs )\r\n    );\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    //searching for log in info in the local storage\r\n    const loggedUserDataJSON = window.localStorage.getItem('loggedBlogappUser');\r\n    if(loggedUserDataJSON){\r\n      //userData contains the token, username and name\r\n      const userData = JSON.parse(loggedUserDataJSON);\r\n      setUser(userData);\r\n      //setToken will prepared a bearer token in the blogService local variable token\r\n      blogService.setToken(userData.token);\r\n    }\r\n  }, []);\r\n\r\n\r\n  const handleLogin = async (userCredentials) => {\r\n\r\n    try{\r\n      //userData will have the username, name and token returned from backend\r\n      const userData = await loginService.login(userCredentials);\r\n      //saving the userData in the local storage\r\n      window.localStorage.setItem(\r\n        'loggedBlogappUser', JSON.stringify(userData)\r\n      );\r\n      setUser(userData);\r\n      //creating a bearer token in the blogService local variable token\r\n      blogService.setToken(userData.token);\r\n\r\n    }\r\n    catch(exception){\r\n      setErrorMessage('Invalid username or password');\r\n      setTimeout(() => {\r\n        setErrorMessage(null);\r\n      }, 5000);\r\n    }\r\n  };\r\n\r\n\r\n  const handleLogout = () => {\r\n    //clearing the local storage of the userData\r\n    window.localStorage.removeItem('loggedBlogappUser');\r\n    //setting the blogService local variable token to null\r\n    blogService.setToken(null);\r\n    setUser(null);\r\n  };\r\n\r\n\r\n  const addBlog = async (blogObject) => {\r\n    //we can access the toggleVisible function defined in the\r\n    //Togglable component from this App component because of the ref mechanism\r\n    //details inside the Togglable component\r\n    blogFormRef.current.toggleVisible();\r\n    try {\r\n      const returnedBlog = await blogService.create(blogObject);\r\n      //the returnedBlog's user field is not populated\r\n      //it just contains the id of the creator\r\n      const modifiedReturnedBlog = {\r\n        ...returnedBlog,\r\n        user:{\r\n          username:user.username, //from the user state\r\n          name:user.name, // from the user state\r\n          id:returnedBlog.user.toString()\r\n        }\r\n      };\r\n      setBlogs(blogs.concat(modifiedReturnedBlog));\r\n      setSuccessMessage(`a new blog ${returnedBlog.title} by ${returnedBlog.author} added`);\r\n      setTimeout(() => {\r\n        setSuccessMessage(null);\r\n      }, 5000);\r\n    } catch(exception){\r\n      setErrorMessage(exception.response.data.error);\r\n      setTimeout(() => {\r\n        setErrorMessage(null);\r\n      }, 5000);\r\n    }\r\n  };\r\n\r\n  const deleteBlog = async(id) => {\r\n    try {\r\n      await blogService.deleteBlog(id);\r\n      setBlogs(blogs.filter(b => b.id !== id));\r\n      setSuccessMessage('the blog has been successfully deleted');\r\n      setTimeout(() => {\r\n        setSuccessMessage(null);\r\n      }, 5000);\r\n    } catch(exception) {\r\n      setErrorMessage(exception.data.error.message);\r\n      setTimeout(() => {\r\n        setErrorMessage(null);\r\n      }, 5000);\r\n    }\r\n  };\r\n\r\n\r\n  const increaseLikeOf = async (id) => {\r\n    let blog = blogs.find(b => b.id === id);\r\n    let likeObj = { likes : blog.likes + 1 };\r\n    try {\r\n      await blogService.update(id, likeObj);\r\n      //we can't just replace the old blog with the returned blog because\r\n      //the user field is not populated in the returned blog\r\n      setBlogs(blogs.map(blog => {\r\n        return blog.id===id ? { ...blog, likes:blog.likes+1 } : blog;\r\n      }));\r\n    } catch(exception) {\r\n      setErrorMessage(`Blog ${blog.title} has been deleted`);\r\n      setTimeout(() => {\r\n        setErrorMessage(null);\r\n      }, 5000);\r\n      setBlogs(blogs.filter(b => b.id !== id));\r\n    }\r\n  };\r\n\r\n\r\n  const blogForm = () => {\r\n    //The Togglable component has opening and closing tag\r\n    //the BlogForm component is inside the Togglable component\r\n    //BlogForm component will be available to the Togglable component\r\n    //as {props.children}\r\n    return (\r\n      //the ref is transferred because we want to access a function\r\n      //defined in the Togglable component from here\r\n      //i.e. from the App component\r\n      <Togglable buttonLabel=\"add a blog\" ref={blogFormRef}>\r\n        <BlogForm addBlog={addBlog} />\r\n      </Togglable>\r\n    );\r\n  };\r\n\r\n\r\n  const sortBlogs = () => {\r\n    const sortedBlog = [...blogs].sort((bloga, blogb) => blogb.likes - bloga.likes);\r\n    setBlogs(sortedBlog);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Notification\r\n        successMessage={successMessage}\r\n        errorMessage={errorMessage}\r\n      />\r\n\r\n      {\r\n        user === null ?\r\n          <LoginForm handleLogin={handleLogin} /> :\r\n          <div>\r\n            <h2>{user.name} logged in</h2>\r\n            <button onClick={handleLogout}>Log out</button>\r\n            {blogForm()}\r\n            <h2>BLOGS</h2>\r\n            <button onClick={sortBlogs} id='sort-button'>Sort by likes</button>\r\n            {blogs.map(blog =>\r\n              <Blog\r\n                key={blog.id}\r\n                blog={blog}\r\n                addLike={() => increaseLikeOf(blog.id)}\r\n                deleteBlog = {deleteBlog}\r\n              />\r\n            )\r\n            }\r\n          </div>\r\n      }\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}